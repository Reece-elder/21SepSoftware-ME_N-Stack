Documents are objects of data stored in MongoDB using BSON 

Documents DO NOT NEED TO follow a strict schema (but is generally useful to give them a schema) 

+ Much easier to update data along the line 
- Its harder to see the connections between data AND data can be come muddled

 
How to Create a document to put in the collection

insertOne() <-- Pass in the BSON we want to add

db.lizardPen.insertOne(
{
"name" : "Monty",
"species" : "Iguana",
"length" : 23
});

_id : Is a default 'primary key' unique identifier for this object, created with hexidecimal 

insertMany() to insert multiple documents

db.lizardPen.insertMany([

{
"name" : "buttercup",
"species" : "Gecko",
"favFood" : [
	"Crickets",
	"Kiwis",
	"Spinach"
	]
},
{
"name" : "Mia",
"species" : "Corn Snake",
"length" : 31,
"shedSkin" : true
}]);

Exercise - 
Using a database called zoo, pet shop, garage, cafe 
Create a collection within that database
Insert 3 document that make sense 
Each doucment should have atleast 4 fields, with 2 of them being unique to that document 

insertOne() - Contains one document
insertMany() - Contains atleast 2 documents 


===========================================
Read Queries
===========================================

.find() - returns ALL data in that collection
SELECT * FROM tablename

## Projection 
Only grabbing specific fields from objects

db.lizardPen.find(
{},
{
"name" : true,
"Species" : true,
"length" : true
}
);

_id WILL ALWAYS BE SHOWN 
UNLESS EXCLUDED WITH "_id" : false

## Simple Queries

By passing in partial objects, we can only select documents we want

SELECT * FROM lizardPen WHERE name = "Monty"

db.lizardPen.find(
	{
	"name" : "Monty"
	}
);

db.lizardPen.find(
{
"favFood" : [
	"Crickets",
	"Spinach"
	]
}
);

## Query Operators

These are used to check more than is x = y
x != y, x < y, x contains y

// Grab all lizards with length above 30
db.lizardPen.find( 
{
"length" : {"$gt" : 30}
}
);

equals = $eq
not equals = $ne
greater than = $gt
less than = $lt
Greater than or equal = $gte  

### In NiN (in or not in)
- If an array contains (or doesnt contain) a specific value 

db.lizardPen.find(
{
	"favFood" : { "$in" : [
			       "Kiwis"
			      ]
		    }
}
)

db.lizardPen.find(
{
	"favFood" : { "$nin" : [
			       "Lasagna"
			      ]
		    }
}
)

Exercise

Create 2 more documents to add to your collection (look at below queries to see what you may need to add) 

Using the following queries return some data
- Read all
- Equals
- Doesnt Equal
- Less than
- Greater than or equals
- In
- not in 

Stretch goal 
- For every query, only show the data you're querying and some other id (name) 











